{"name":"jQuery CropBox","body":"![Скриншот](https://github.com/inferno/crop-box/raw/master/images/view-02.png \"Скриншот\")\r\n\r\nСкрипт позволяет кадрировать картинку используя заранее определенные пропорции.\r\n\r\n## Как это работает?\r\n\r\nСкрипт написан с использованием `jQuery`.\r\n\r\nВ секцию `head` необходимо подключить `jQuery`, например, вот так:\r\n\r\n```html\r\n<script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js\" type=\"text/javascript\"></script>\r\n```\r\n\r\nДальше необходимо подключить `jquery.cropbox.js` и `crop-box.css` из папки `public`:\r\n\r\n```html\r\n<script src=\"js/jquery.cropbox.js\" type=\"text/javascript\"></script>\r\n<link href=\"css/crop-box.css\" rel=\"stylesheet\" type=\"text/css\">\r\n```\r\n\r\nВ качестве якоря для виджета используется любой html-элемент. Якорь должен содержать как минимум один обязательный data-атрибут (`data-crop`). Пример:\r\n\r\n```html\r\n<div data-crop=\"img/navalny.png\" data-size=\"100x100\" data-size-preview=\"260x310\" data-aspect=\"0.5\" data-url=\"/upload\"></div>\r\n```\r\n\r\n### Атрибуты\r\n\r\n* `data-crop` — `url` картинки для кадрирования. Единственный обязательный параметр.\r\n* `data-size` — размеры картинки, которая должна получиться после кадрирования\r\n* `data-size-preview` — размеры превьюшечки\r\n* `data-type` — тип получаемой картинки: `png` или `jpg`\r\n* `data-aspect` — минимальный размер выбранной зоны\r\n* `data-url` — серверный скрипт, который будет принимать картинку, закодированную в `data-uri`, ответ приходит в параметре с названием `cropped_file`\r\n\r\nЕсли разобрать пример выше, мы будем кадрировать `img/navalny.png`, у нас получится картинка с размерами `100x100`, минимальная часть, которую мы сможем выбрать на картинке будет равна `50%` от `260x310`, итоговую картинку получит скрипт, расположенный по адресу `/upload`.\r\n\r\nКартинку, пришедшую на сервер нужно разобрать, она закодирована в `data-uri`. Получить картинку на `ruby` можно следующим образом:\r\n\r\n```bash\r\nfile = Base64.decode64(params[:cropped_file].split(',')[1])\r\n```\r\n\r\n### События\r\n\r\nДоступны следующие события: `complete`, `show` и `hide`.\r\n\r\nПривязать событие можно следующим образом:\r\n\r\n```javascript\r\n$('#anchor').on('complete', function(e, file){\r\n  console.info(file);\r\n});\r\n```\r\n\r\n## Тестирование возможностей\r\n\r\nВы можете быстро увидеть работу виджета в действии, для этого, у вас должен быть установлен интерпритатор Ruby.\r\n\r\nВыкачиваем репозиторий:\r\n\r\n```bash\r\ngit clone git@github.com:inferno/CropBox.git\r\n```\r\n\r\nУстанавливаем необходимые гемы:\r\n\r\n```bash\r\ncd CropBox\r\nbundle install\r\n```\r\nЗапускаем приложение:\r\n\r\n```bash\r\nruby app.rb\r\n```\r\n\r\nВ браузере заходим по адресу `http://localhost:4567`, смотрим на работу скрипта.\r\n\r\n## Скриншот\r\n\r\nНа скриншоте представлен внешний вид по умолчанию. Изменяя `crop-box.css` вы можете легко стилизовать виджет.\r\n\r\n![Скриншот](https://github.com/inferno/crop-box/raw/master/images/view-01.png \"Скриншот\")\r\n\r\n## Поддержка браузеров\r\n\r\nСкрипт поддерживает все браузеры, имеющие реализацию `canvas`.\r\n\r\n* Firefox\r\n* Opera\r\n* Safari и Chrome\r\n* Internet Explorer 9+\r\n\r\n## Авторство\r\nCopyright &copy; Konstantin Savelyev\r\n","tagline":"кадрирование картинок с лицами","google":"UA-1139781-11","note":"Don't delete this file! It's used internally to help with page regeneration."}